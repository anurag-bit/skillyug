// This is your Prisma schema file for Skillyug 2.0
// Refactored for Auth.js, scalability, and new product features.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// AUTHENTICATION (Auth.js)
// ========================================

model User {
  id            String    @id @default(cuid())
  fullName      String?   @map("full_name")
  email         String?   @unique
  password      String?   @db.Text // Hashed password for local authentication
  emailVerified DateTime? @map("email_verified") // Auth.js standard field

  // --- OTP VERIFICATION FIELDS ---
  otp        String?   @db.Text // Hashed OTP
  otpExpires DateTime? @map("otp_expires") // Expiration time for the OTP
  isVerified Boolean   @default(false) @map("is_verified")

  // --- PASSWORD RESET FIELDS ---
  passwordResetToken   String?   @unique @map("password_reset_token") @db.Text
  passwordResetExpires DateTime? @map("password_reset_expires")

  image     String? // Avatar URL
  bio       String? // User bio for profile page
  userType  UserType @default(STUDENT) @map("user_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // App-specific relations
  coursesAsMentor Course[]           @relation("CourseMentor")
  purchases       Purchase[]
  enrollments     Enrollment[]
  reviews         Review[]
  adminActions    AdminAction[]
  threads         DiscussionThread[]
  posts           DiscussionPost[]
  certificates    Certificate[]
  notifications   Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserType {
  STUDENT
  MENTOR
  ADMIN

  @@map("user_type")
}

enum Category {
  PROGRAMMING
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  DATA_SCIENCE
  ARTIFICIAL_INTELLIGENCE
  CLOUD_COMPUTING
  CYBERSECURITY
  DESIGN
  BUSINESS
  MARKETING
  OTHER

  @@map("category")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT

  @@map("difficulty")
}

// ========================================
// COURSE & CONTENT MANAGEMENT
// ========================================

model Course {
  id             String     @id @default(cuid())
  courseName     String     @map("course_name")
  description    String?
  imageUrl       String     @map("image_url")
  price          Decimal    @db.Decimal(10, 2)
  token          Int        @default(0) // Number of tokens required to enroll       
  category       Category
  difficulty     Difficulty @default(BEGINNER)
  durationHours  Int?       @map("duration_hours")
  language       String     @default("English")
  isActive       Boolean    @default(true) @map("is_active")
  isFeatured     Boolean    @default(false) @map("is_featured")
  learningPathId String?    @map("learning_path_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Denormalized for query performance
  ratingAverage Decimal @default(0) @map("rating_average") @db.Decimal(3, 2)
  reviewCount   Int     @default(0) @map("review_count")

  // Relations
  mentor        User                 @relation("CourseMentor", fields: [mentorId], references: [id])
  mentorId      String               @map("mentor_id")
  lessons       Lesson[]
  enrollments   Enrollment[]
  purchaseItems PurchaseItem[]
  reviews       Review[]
  prerequisites CoursePrerequisite[] @relation("Prerequisites")
  requiredFor   CoursePrerequisite[] @relation("RequiredFor")
  tags          CourseTag[]
  learningPath  LearningPath?        @relation(fields: [learningPathId], references: [id])
  bundles       CourseBundle[]

  @@index([mentorId])
  @@map("courses")
}

// Represents a structured learning journey
model LearningPath {
  id          String   @id @default(cuid())
  title       String
  description String?
  courses     Course[]

  @@map("learning_paths")
}

// Defines prerequisites for a course
model CoursePrerequisite {
  courseId       String @map("course_id")
  prerequisiteId String @map("prerequisite_id")

  course       Course @relation("Prerequisites", fields: [courseId], references: [id], onDelete: Cascade)
  prerequisite Course @relation("RequiredFor", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@id([courseId, prerequisiteId])
  @@map("course_prerequisites")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?  @db.Text
  videoUrl    String?  @map("video_url")
  durationMin Int?     @map("duration_min")
  order       Int
  isPreview   Boolean  @default(false) @map("is_preview")
  courseId    String   @map("course_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course   Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress LessonProgress[]
  threads  DiscussionThread[]

  @@index([courseId])
  @@map("lessons")
}

model CourseTag {
  id    String  @id @default(cuid())
  name  String  @unique
  color String? @default("#3B82F6") // Hex color for UI

  courses Course[]

  @@map("course_tags")
}

// ========================================
// PRODUCT & PURCHASE SYSTEM
// ========================================

// Represents a sellable package of courses
model Bundle {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String? @map("image_url")
  isActive    Boolean @default(true) @map("is_active")

  courses       CourseBundle[]
  purchaseItems PurchaseItem[]

  @@map("bundles")
}

// Join table for Courses and Bundles
model CourseBundle {
  courseId String @map("course_id")
  bundleId String @map("bundle_id")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@id([courseId, bundleId])
  @@map("course_bundles")
}

// An "order" or "cart" at the time of transaction
model Purchase {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  totalAmount Decimal       @map("total_amount") @db.Decimal(10, 2)
  purchasedAt DateTime      @default(now()) @map("purchased_at")
  status      PaymentStatus @default(PENDING) // Status of the overall purchase

  user     User           @relation(fields: [userId], references: [id], onDelete: Restrict)
  items    PurchaseItem[]
  payments Payment[]

  @@index([userId])
  @@map("purchases")
}

// An item within a purchase (e.g., a course or a bundle)
model PurchaseItem {
  id            String  @id @default(cuid())
  purchaseId    String  @map("purchase_id")
  purchasePrice Decimal @map("purchase_price") @db.Decimal(10, 2)

  // The item can be a course OR a bundle
  courseId String? @map("course_id")
  bundleId String? @map("bundle_id")

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  course   Course?  @relation(fields: [courseId], references: [id])
  bundle   Bundle?  @relation(fields: [bundleId], references: [id])

  @@map("purchase_items")
}

model Payment {
  id                String        @id @default(cuid())
  purchaseId        String        @map("purchase_id")
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  provider          String        @default("razorpay") // e.g., 'razorpay', 'stripe'
  providerPaymentId String        @unique @map("provider_payment_id")
  providerOrderId   String?       @map("provider_order_id")
  signature         String? // For verification (e.g., Razorpay signature)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED

  @@map("payment_status")
}

// ========================================
// ENROLLMENT & PROGRESS
// ========================================

model Enrollment {
  id              String           @id @default(cuid())
  userId          String           @map("user_id")
  courseId        String           @map("course_id")
  enrolledAt      DateTime         @default(now()) @map("enrolled_at")
  completedAt     DateTime?        @map("completed_at")
  lastAccessedAt  DateTime?        @map("last_accessed_at")
  progressPercent Decimal          @default(0) @map("progress_percent") @db.Decimal(5, 2)
  status          EnrollmentStatus @default(ACTIVE)

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]
  certificate    Certificate?

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id           String    @id @default(cuid())
  enrollmentId String    @map("enrollment_id")
  lessonId     String    @map("lesson_id")
  completed    Boolean   @default(false)
  completedAt  DateTime? @map("completed_at")
  timeSpentMin Int?      @map("time_spent_min")

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson     Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
  @@map("lesson_progress")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  DROPPED

  @@map("enrollment_status")
}

// Certificate issued upon course completion
model Certificate {
  id            String   @id @default(cuid())
  enrollmentId  String   @unique @map("enrollment_id")
  userId        String   @map("user_id")
  courseName    String   @map("course_name") // Denormalized for easy certificate generation
  issuedAt      DateTime @default(now()) @map("issued_at")
  credentialUrl String   @unique @map("credential_url")

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("certificates")
}

// ========================================
// REVIEWS & COMMUNITY
// ========================================

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

// A Q&A thread within a course lesson
model DiscussionThread {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  userId    String   @map("user_id")
  lessonId  String   @map("lesson_id")
  createdAt DateTime @default(now()) @map("created_at")

  author User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  posts  DiscussionPost[]

  @@map("discussion_threads")
}

// A reply/post within a discussion thread
model DiscussionPost {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String   @map("user_id")
  threadId  String   @map("thread_id")
  parentId  String?  @map("parent_id") // For nested replies
  createdAt DateTime @default(now()) @map("created_at")

  author  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread  DiscussionThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parent  DiscussionPost?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction)
  replies DiscussionPost[] @relation("Replies")

  @@map("discussion_posts")
}

// ========================================
// ADMIN, ANALYTICS & NOTIFICATIONS
// ========================================

model AdminAction {
  id          String          @id @default(cuid())
  adminId     String          @map("admin_id")
  action      AdminActionType
  targetType  String          @map("target_type") // 'user', 'course', 'payment', etc.
  targetId    String          @map("target_id")
  description String?
  metadata    Json? // Additional data

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

enum AdminActionType {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  SUSPEND
  RESTORE

  @@map("admin_action_type")
}

// Analytics and metrics
model Analytics {
  id       String         @id @default(cuid())
  date     DateTime       @db.Date
  metric   AnalyticMetric
  value    Decimal        @db.Decimal(15, 2)
  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([date, metric])
  @@map("analytics")
}

enum AnalyticMetric {
  DAILY_ACTIVE_USERS
  NEW_REGISTRATIONS
  COURSE_COMPLETIONS
  REVENUE
  COURSE_ENROLLMENTS
  LESSON_COMPLETIONS

  @@map("analytic_metric")
}

// Notifications & Communication
model Notification {
  id      String           @id @default(cuid())
  userId  String           @map("user_id")
  title   String
  message String
  type    NotificationType
  read    Boolean          @default(false)
  data    Json? // Additional notification data

  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  COURSE_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ENROLLMENT_CONFIRMATION
  COURSE_COMPLETION
  NEW_LESSON
  SYSTEM_ANNOUNCEMENT

  @@map("notification_type")
}
