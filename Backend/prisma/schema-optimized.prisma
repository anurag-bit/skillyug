// Optimized Prisma Schema for Skillyug 2.0
// This file contains performance and security improvements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// AUTHENTICATION (Auth.js) - OPTIMIZED
// ========================================

model User {
  id            String    @id @default(cuid())
  fullName      String?   @map("full_name")
  email         String?   @unique
  password      String?   @db.Text // Hashed password for local authentication
  emailVerified DateTime? @map("email_verified") // Auth.js standard field

  // --- OTP VERIFICATION FIELDS ---
  otp        String?   @db.Text // Hashed OTP
  otpExpires DateTime? @map("otp_expires") // Expiration time for the OTP
  isVerified Boolean   @default(false) @map("is_verified")

  // --- PASSWORD RESET FIELDS ---
  passwordResetToken   String?   @unique @map("password_reset_token") @db.Text
  passwordResetExpires DateTime? @map("password_reset_expires")

  image     String? // Avatar URL
  bio       String? // User bio for profile page
  userType  UserType @default(STUDENT) @map("user_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // App-specific relations
  coursesAsMentor Course[]           @relation("CourseMentor")
  purchases       Purchase[]
  enrollments     Enrollment[]
  reviews         Review[]
  adminActions    AdminAction[]
  threads         DiscussionThread[]
  posts           DiscussionPost[]
  certificates    Certificate[]
  notifications   Notification[]

  // PERFORMANCE OPTIMIZATIONS: Add composite indexes
  @@index([email, userType]) // For login queries
  @@index([userType, createdAt]) // For admin user listings
  @@index([isVerified, userType]) // For filtering verified users
  @@map("users")
}

// Add connection pooling configuration
model Course {
  id             String     @id @default(cuid())
  courseName     String     @map("course_name")
  description    String?
  imageUrl       String     @map("image_url")
  price          Decimal    @db.Decimal(10, 2)
  token          Int        @default(0) // Number of tokens required to enroll       
  category       Category
  difficulty     Difficulty @default(BEGINNER)
  durationHours  Int?       @map("duration_hours")
  language       String     @default("English")
  isActive       Boolean    @default(true) @map("is_active")
  isFeatured     Boolean    @default(false) @map("is_featured")
  learningPathId String?    @map("learning_path_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Denormalized for query performance
  ratingAverage Decimal @default(0) @map("rating_average") @db.Decimal(3, 2)
  reviewCount   Int     @default(0) @map("review_count")

  // Relations
  mentor        User                 @relation("CourseMentor", fields: [mentorId], references: [id])
  mentorId      String               @map("mentor_id")
  lessons       Lesson[]
  enrollments   Enrollment[]
  purchaseItems PurchaseItem[]
  reviews       Review[]
  prerequisites CoursePrerequisite[] @relation("Prerequisites")
  requiredFor   CoursePrerequisite[] @relation("RequiredFor")
  tags          CourseTag[]
  learningPath  LearningPath?        @relation(fields: [learningPathId], references: [id])
  bundles       CourseBundle[]

  // PERFORMANCE OPTIMIZATIONS: Enhanced indexing strategy
  @@index([mentorId])
  @@index([category, difficulty]) // For course filtering
  @@index([isFeatured, isActive]) // For featured course queries
  @@index([price, category]) // For price-based filtering
  @@index([createdAt, isActive]) // For recent courses
  @@index([ratingAverage, reviewCount]) // For sorting by rating
  @@fulltext([courseName, description]) // For search functionality
  @@map("courses")
}

// Add audit logging model for security
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource  String   // users, courses, payments, etc.
  resourceId String? @map("resource_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  metadata  Json?    // Additional context
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, action])
  @@index([resource, action])
  @@index([createdAt])
  @@map("audit_logs")
}

// Add session management for security
model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique @db.Text
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  isActive  Boolean  @default(true) @map("is_active")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

// Enhanced Purchase model with better tracking
model Purchase {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  totalAmount Decimal       @map("total_amount") @db.Decimal(10, 2)
  currency    String        @default("INR")
  status      PaymentStatus @default(PENDING)
  purchasedAt DateTime      @default(now()) @map("purchased_at")
  
  // Enhanced tracking fields
  ipAddress   String?       @map("ip_address")
  userAgent   String?       @map("user_agent")
  refundedAt  DateTime?     @map("refunded_at")
  refundReason String?      @map("refund_reason")

  user     User           @relation(fields: [userId], references: [id], onDelete: Restrict)
  items    PurchaseItem[]
  payments Payment[]

  @@index([userId, status])
  @@index([purchasedAt, status])
  @@index([status, totalAmount])
  @@map("purchases")
}

// Add rate limiting tracking
model RateLimitLog {
  id        String   @id @default(cuid())
  ipAddress String   @map("ip_address")
  endpoint  String
  attempts  Int      @default(1)
  windowStart DateTime @map("window_start")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([ipAddress, endpoint, windowStart])
  @@index([ipAddress, endpoint])
  @@index([windowStart])
  @@map("rate_limit_logs")
}

// Keep existing enums and other models...
enum UserType {
  STUDENT
  MENTOR
  ADMIN

  @@map("user_type")
}

enum Category {
  PROGRAMMING
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  DATA_SCIENCE
  ARTIFICIAL_INTELLIGENCE
  CLOUD_COMPUTING
  CYBERSECURITY
  DESIGN
  BUSINESS
  MARKETING
  OTHER

  @@map("category")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT

  @@map("difficulty")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED

  @@map("payment_status")
}
